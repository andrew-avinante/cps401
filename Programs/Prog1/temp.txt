// Andrew Avinante (aavin894) Program 1: Fun with Slack
// This program uses the Slack API to interact with Slack conversations using await and promises

let request = require('request');

function Slack(token, url) {
    this.token = token;
    this.url = url;
}

Slack.prototype.setOptions = function(method, APIMethod, query) {
    let urlAPI = this.url + APIMethod;
    let qs = {};
    qs.token = this.token;
    if (query !== undefined) {
        Object.keys(query).forEach(function(i) {
            qs[i] = query[i];
        });
    }
    return {
        url: urlAPI,
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        qs: qs
    }
}

Slack.prototype.getChannels

Slack.prototype.getChannels = async function() {
    let self = this;
    return new Promise(function(resolve, reject) {
        request(self.setOptions('GET', 'conversations.list'), function(error, response, body) {
            let channels = [];
            if (!error && response.statusCode == 200) {
                let response = JSON.parse(body);
                if(response.ok)
                {
                    for (i in response.channels) {
                        channels[i] = {
                            name: response.channels[i].name,
                            topic: response.channels[i].topic.value,
                            id: response.channels[i].id
                        };
                    };
                    resolve(channels);
                }
                else
                {
                    reject(response.error);
                }
            } else {
                reject(error);
            }
        });
    });
}

Slack.prototype.getUsers = async function() {
    let self = this;
    return new Promise(function(resolve, reject) {
        request(self.setOptions('GET', 'users.list'), function(error, response, body) {
            let users = [];
            if (!error && response.statusCode == 200) {
                let response = JSON.parse(body);
                if (response.ok) {
                    for (i in response.members) {
                        users[i] = {
                            name: response.members[i].name,
                            real_name: response.members[i].real_name,
                            id: response.members[i].id
                        };
                    };
                    resolve(users);
                } else {
                    reject(response.error);
                }
            } else {
                reject(error);
            }
        });
    });
}

Slack.prototype.postMessage = async function(channelName, message) {
    let self = this;
    return new Promise(function(resolve, reject) {
        request(self.setOptions('POST', 'chat.postMessage', {
            channel: channelName,
            text: message,
            type: 'message'
        }), function(error, response, body) {
            if (!error && response.statusCode == 200) {
                let response = JSON.parse(body);
                if (response.ok) {
                    resolve(response.ok);
                } else {
                    reject(response.error);
                }
            } else {
                reject(error);
            }
        });
    });
}

Slack.prototype.getPosts = async function(channelID, pageSize, msg, args = {
    channel: channelID,
    count: pageSize
}) {
    let self = this;
    return new Promise(async function(resolve, reject) {
        request(self.setOptions('GET', 'channels.history', args), async function(error, response, body) {
            if (!error && response.statusCode == 200) {
                let response = JSON.parse(body);
                if (response.has_more) {
                    msg.push(response.messages);
                    await self.getPosts(channelID, pageSize, msg, {
                        channel: channelID,
                        count: pageSize,
                        latest: response.messages[response.messages.length - 1].ts
                    });
                } else if(!response.has_more){
                    msg.push(response.messages);
                    resolve(msg);;
                }
                else
                {
                    reject(error);
                }
            }
            resolve(msg);
        });
    });
}

Slack.prototype.printTableHeader = async function(header1, header2) {
    console.log(header1.padEnd(14, ' ') + header2);
    console.log('------------  -------------------------------------------------');
}

exports.Slack = Slack;